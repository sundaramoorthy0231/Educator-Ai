# -*- coding: utf-8 -*-
"""Educator AI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tGsmEMR5hySBc1YfHRdGd7yZY2IN9Ydn

# üî• EduTutor AI - Modified & Optimized Version
# Run this in Google Colab

# Install required libraries
"""

!pip install transformers torch gradio -q

"""# Load model and tokenizer"""

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# -----------------------
# üîß Configurations
# -----------------------
MODEL_NAME = "ibm-granite/granite-3.2-2b-instruct"
MAX_TOKENS = 1024
TEMPERATURE = 0.7

print(f"üîπ Loading model: {MODEL_NAME}")
tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)
model = AutoModelForCausalLM.from_pretrained(
    MODEL_NAME,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

# -----------------------
# üöÄ Helper Function
# -----------------------
def generate_response(prompt, max_length=MAX_TOKENS):
    """Generate AI response using IBM Granite model"""
    if not prompt.strip():
        return "‚ö†Ô∏è Please enter a valid input."

    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)
    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=TEMPERATURE,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    return response.replace(prompt, "").strip()

# -----------------------
# üéØ Features
# -----------------------
def concept_explanation(concept):
    return generate_response(f"Explain {concept} in detail with real-world examples:")

def quiz_generator(concept):
    return generate_response(
        f"Generate 5 quiz questions about {concept} with multiple types (MCQ, T/F, short answer) "
        "and provide answers at the end:"
    )

def study_planner(subject, duration):
    return generate_response(
        f"Create a detailed study plan for {subject} over {duration}, "
        "including daily goals, key topics, and study tips:"
    )

def problem_solver(problem):
    return generate_response(f"Solve this step-by-step: {problem}")

# -----------------------
# üé® Gradio UI
# -----------------------
with gr.Blocks(title="EduTutor AI", theme=gr.themes.Soft()) as app:
    gr.Markdown("## üéì EduTutor AI: Personalized Learning Assistant\nPowered by IBM Granite Model")

    with gr.Tab("üìö Concept Explanation"):
        concept_input = gr.Textbox(label="Enter Concept", placeholder="e.g., Quantum Computing")
        concept_output = gr.Textbox(label="Explanation", lines=12, show_copy_button=True)
        gr.Button("Explain").click(concept_explanation, concept_input, concept_output)

    with gr.Tab("‚ùì Quiz Generator"):
        quiz_input = gr.Textbox(label="Topic", placeholder="e.g., Photosynthesis")
        quiz_output = gr.Textbox(label="Quiz & Answers", lines=15, show_copy_button=True)
        gr.Button("Generate Quiz").click(quiz_generator, quiz_input, quiz_output)

    with gr.Tab("üìÖ Study Planner"):
        subject_input = gr.Textbox(label="Subject")
        duration_input = gr.Textbox(label="Duration", placeholder="e.g., 2 weeks")
        planner_output = gr.Textbox(label="Study Plan", lines=15, show_copy_button=True)
        gr.Button("Create Plan").click(study_planner, [subject_input, duration_input], planner_output)

    with gr.Tab("üßÆ Problem Solver"):
        problem_input = gr.Textbox(label="Problem", placeholder="e.g., Solve: 2x+3=7")
        solution_output = gr.Textbox(label="Solution", lines=12, show_copy_button=True)
        gr.Button("Solve").click(problem_solver, problem_input, solution_output)

    gr.Markdown("---\n‚úÖ Built with IBM Granite | üöÄ Deployed on Google Colab")

print("üöÄ Launching EduTutor AI...")
app.launch(share=True)
